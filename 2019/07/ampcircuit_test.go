package ampcircuit

import (
	"fmt"
	"reflect"
	"testing"
)

func TestPerm(t *testing.T) {
	tcs := []struct {
		in  []int
		out [][]int
	}{
		{in: []int{1, 2}, out: [][]int{{1, 2}, {2, 1}}},
		{in: []int{1, 2, 3}, out: [][]int{{1, 2, 3}, {1, 3, 2}, {2, 1, 3}, {2, 3, 1}, {3, 2, 1}, {3, 1, 2}}},
	}

	for _, tc := range tcs {
		got := Perm(tc.in)
		if reflect.DeepEqual(got, tc.out) == false {
			t.Errorf("%v != %v", got, tc.out)
		}
	}
}

func TestAmplify(t *testing.T) {
	tcs := []struct {
		prog      []int
		maxSignal int
		atPhase   []int
	}{
		{
			prog:      []int{3, 15, 3, 16, 1002, 16, 10, 16, 1, 16, 15, 15, 4, 15, 99, 0, 0},
			maxSignal: 43210,
			atPhase:   []int{4, 3, 2, 1, 0},
		},
	}

	for _, tc := range tcs {
		m, err := Amplify(tc.prog, tc.atPhase)
		if err != nil {
			t.Error(err)
		}
		if m != tc.maxSignal {
			t.Errorf("%d != %d", m, tc.maxSignal)
		}
	}
}

func TestMaxAmplify(t *testing.T) {
	tcs := []struct {
		prog      []int
		maxSignal int
		atPhase   []int
	}{
		{
			prog:      []int{3, 15, 3, 16, 1002, 16, 10, 16, 1, 16, 15, 15, 4, 15, 99, 0, 0},
			maxSignal: 43210,
			atPhase:   []int{4, 3, 2, 1, 0},
		},
		{
			prog:      []int{3, 23, 3, 24, 1002, 24, 10, 24, 1002, 23, -1, 23, 101, 5, 23, 23, 1, 24, 23, 23, 4, 23, 99, 0, 0},
			maxSignal: 54321,
			atPhase:   []int{0, 1, 2, 3, 4},
		},
		{
			prog:      []int{3, 31, 3, 32, 1002, 32, 10, 32, 1001, 31, -2, 31, 1007, 31, 0, 33, 1002, 33, 7, 33, 1, 33, 31, 31, 1, 32, 31, 31, 4, 31, 99, 0, 0, 0},
			maxSignal: 65210,
			atPhase:   []int{1, 0, 4, 3, 2},
		},
	}

	phases := Perm([]int{0, 1, 2, 3, 4})

	for _, tc := range tcs {
		m, p, err := MaxAmplify(tc.prog, phases)
		if err != nil {
			t.Error(err)
		}
		if m != tc.maxSignal {
			t.Errorf("%d != %d", m, tc.maxSignal)
		}
		if reflect.DeepEqual(p, tc.atPhase) == false {
			t.Errorf("%v != %v", p, tc.atPhase)
		}
	}
}

func TestPartOne(t *testing.T) {
	prog := []int{3, 8, 1001, 8, 10, 8, 105, 1, 0, 0, 21, 34, 59, 68, 89, 102, 183, 264, 345, 426, 99999, 3, 9, 102, 5, 9, 9, 1001, 9, 5, 9, 4, 9, 99, 3, 9, 101, 3, 9, 9, 1002, 9, 5, 9, 101, 5, 9, 9, 1002, 9, 3, 9, 1001, 9, 5, 9, 4, 9, 99, 3, 9, 101, 5, 9, 9, 4, 9, 99, 3, 9, 102, 4, 9, 9, 101, 3, 9, 9, 102, 5, 9, 9, 101, 4, 9, 9, 4, 9, 99, 3, 9, 1002, 9, 5, 9, 1001, 9, 2, 9, 4, 9, 99, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 99, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 99, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 99, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 99, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 99}
	phases := Perm([]int{0, 1, 2, 3, 4})
	m, p, err := MaxAmplify(prog, phases)
	if err != nil {
		t.Error(err)
	}

	fmt.Println(m, p)
}
